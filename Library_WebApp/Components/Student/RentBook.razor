@inject IStudentService _student
@inject UserStateManagementService _userStateService
@inject IJSRuntime jsRuntime

<h3 class="text-center">Rent a Book Here</h3>
<div class="d-flex flex-column justify-content-center">
    <div class="container d-flex justify-content-center align-items-center mt-5">
        <div class="border rounded p-4 w-50">
            <form class="form-group" @onsubmit="HandleSubmit">
                <div class="mb-3">
                    <label for="Bookname" class="form-label fw-bold">Bookname:</label>
                    <InputText class="form-control" type="text" id="Bookname" @bind-Value="bookname" placeholder="Enter the Bookname" />
                </div>
                <div class="mb-3 d-grid gap-2 d-md-flex justify-content-md-center">
                    <button class="btn btn-primary" type="submit">Submit</button>
                </div>
            </form>
        </div>
        <h5>@message</h5>
    </div>

    <div class="container-fluid d-flex justify-content-center align-self-center">
        <div id="carouselExample" class="carousel slide mt-5 w-25" data-ride="carousel">
            <div class="carousel-inner">
                @foreach (var image in Images)
                {
                    <div class="carousel-item @(image == Images[0] ? "active" : "")">
                        <img class="d-block" width="400" height="500" src="@image" alt="Slide">
                    </div>
                }
            </div>
            <a class="carousel-control-prev" id="#carouselExample" role="button" @onclick="PrevSlide">
                <span class="carousel-control-prev-icon fs-1 fw-bold" aria-hidden="true"></span>
            </a>
            <a class="carousel-control-next" id="#carouselExample" role="button" @onclick="NextSlide">
                <span class="carousel-control-next-icon fs-1 fw-bold" aria-hidden="true"></span>
            </a>
        </div>
    </div>
</div>


@code
{
    public string bookname { get; set; } = string.Empty;
    public string message { get; set; } = string.Empty;
    private List<string> Images = new List<string>
    {
        "/Images/CProgram.jpg",
        "/Images/CFund.jpg",
        "/Images/cyber.jpg",
        "/Images/Life_Lesson.jpg"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("initializeCarousel", "carouselExample");
        }
    }

    private async Task HandleSubmit()
    {
        var response = await _student.Rentbook(bookname, _userStateService.username);
        if (response.Item2)
        {
            message = "Successfully Rented";
        }
        else
        {
            message = "Error Occurred";
        }
        StateHasChanged();
    }

    private async Task NextSlide()
    {
        await jsRuntime.InvokeVoidAsync("nextSlide", "carouselExample");
    }

    private async Task PrevSlide()
    {
        await jsRuntime.InvokeVoidAsync("prevSlide", "carouselExample");
    }
}
