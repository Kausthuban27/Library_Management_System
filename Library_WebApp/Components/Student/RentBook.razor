@inject IStudentService _student
@inject UserStateManagementService _userStateService
@inject IJSRuntime jsRuntime

<h3 class="text-center">Rent a Book Here</h3>
<div class="container d-flex justify-content-center align-items-center mt-5">
    <div class="border rounded p-4 w-50">
        <form class="form-group" @onsubmit = "RentTheBook">
            <div class="mb-3">
                <label for="Bookname" class="form-label fw-bold">Bookname:</label>
                <InputText class="form-control" type="text" id="Bookname" @bind-Value = "bookname" placeholder="Enter the Bookname" />
            </div>
            <div class="mb-3 d-grid gap-2 d-md-flex justify-content-md-center">
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </form>
    </div>
    <h5>@message</h5>
</div>

@message

<div id="carouselExampleIndicators"
     class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
        <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
    </ol>
    <div class="carousel-inner">
        <div class="carousel-item  active">
            <img class="d-block w-50" src="/Images/C#Fundamentals.jpg">
        </div>
        <div class="carousel-item">
            <img class="d-block w-50" src="/Images/CProgram.jpg">
        </div>
    </div>
    <a id="carouselExampleIndicators-prev"
       class="carousel-control-prev" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a id="carouselExampleIndicators-next"
       class="carousel-control-next" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>

@code 
{
    public string bookname { get; set; } = null!;
    public string message { get; set; } = null!;
    bool firstRender = true;

    protected async Task OnAfterRenderAsync()
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("initializeCarousel");
            firstRender = false;
        }
    }

    private async void RentTheBook()
    {
        var response = await _student.Rentbook(bookname, _userStateService.username);
        if(response.Item2)
        {
            message = "Successfully Rented";
            message = string.Empty;
        }
        else
        {
            message = "Error Occured";
        }
    }
}
